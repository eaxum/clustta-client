// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class Token {
    /**
     * Creates a new Token instance.
     * @param {Partial<Token>} [$$source = {}] - The source object to create the Token.
     */
    constructor($$source = {}) {
        if (!("session_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["session_id"] = "";
        }
        if (!("user" in $$source)) {
            /**
             * @member
             * @type {User}
             */
            this["user"] = (new User());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Token instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Token}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("user" in $$parsedSource) {
            $$parsedSource["user"] = $$createField1_0($$parsedSource["user"]);
        }
        return new Token(/** @type {Partial<Token>} */($$parsedSource));
    }
}

export class User {
    /**
     * Creates a new User instance.
     * @param {Partial<User>} [$$source = {}] - The source object to create the User.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("username" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["username"] = "";
        }
        if (!("email" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["email"] = "";
        }
        if (!("first_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["first_name"] = "";
        }
        if (!("last_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["last_name"] = "";
        }
        if (!("photo" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["photo"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new User instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {User}
     */
    static createFrom($$source = {}) {
        const $$createField5_0 = $Create.ByteSlice;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("photo" in $$parsedSource) {
            $$parsedSource["photo"] = $$createField5_0($$parsedSource["photo"]);
        }
        return new User(/** @type {Partial<User>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = User.createFrom;
