// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as auth_service$0 from "../internal/auth_service/models.js";

/**
 * @returns {Promise<auth_service$0.User> & { cancel(): void }}
 */
export function AuthUser() {
    let $resultPromise = /** @type {any} */($Call.ByID(1418375968));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} email
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function CheckEmailExists(email) {
    let $resultPromise = /** @type {any} */($Call.ByID(388241825, email));
    return $resultPromise;
}

/**
 * @param {string} username
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function CheckUsernameExists(username) {
    let $resultPromise = /** @type {any} */($Call.ByID(397037963, username));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeactivateUserAccount() {
    let $resultPromise = /** @type {any} */($Call.ByID(103841291));
    return $resultPromise;
}

/**
 * @returns {Promise<[boolean, auth_service$0.User]> & { cancel(): void }}
 */
export function IsAuthenticated() {
    let $resultPromise = /** @type {any} */($Call.ByID(517673028));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        $result[1] = $$createType0($result[1]);
        return $result;
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} username
 * @param {string} password
 * @returns {Promise<auth_service$0.Token> & { cancel(): void }}
 */
export function Login(username, password) {
    let $resultPromise = /** @type {any} */($Call.ByID(3065492878, username, password));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} username
 * @param {string} password
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Logout(username, password) {
    let $resultPromise = /** @type {any} */($Call.ByID(2946214063, username, password));
    return $resultPromise;
}

/**
 * @param {string} firstName
 * @param {string} lastName
 * @param {string} username
 * @param {string} email
 * @param {string} password
 * @param {string} confirmPassword
 * @returns {Promise<auth_service$0.User> & { cancel(): void }}
 */
export function Register(firstName, lastName, username, email, password, confirmPassword) {
    let $resultPromise = /** @type {any} */($Call.ByID(800559812, firstName, lastName, username, email, password, confirmPassword));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} email
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ResendToken(email) {
    let $resultPromise = /** @type {any} */($Call.ByID(1440561671, email));
    return $resultPromise;
}

/**
 * @param {string} email
 * @param {string} studioName
 * @param {string} projectName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SendInvitationEmail(email, studioName, projectName) {
    let $resultPromise = /** @type {any} */($Call.ByID(2323642100, email, studioName, projectName));
    return $resultPromise;
}

/**
 * @param {string} firstName
 * @param {string} lastName
 * @param {string} username
 * @param {string} email
 * @returns {Promise<auth_service$0.User> & { cancel(): void }}
 */
export function UpdateUser(firstName, lastName, username, email) {
    let $resultPromise = /** @type {any} */($Call.ByID(747950475, firstName, lastName, username, email));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} photo
 * @returns {Promise<void> & { cancel(): void }}
 */
export function UpdateUserPhoto(photo) {
    let $resultPromise = /** @type {any} */($Call.ByID(3282740197, photo));
    return $resultPromise;
}

/**
 * @param {string} email
 * @param {string} token
 * @returns {Promise<void> & { cancel(): void }}
 */
export function VerifyOTP(email, token) {
    let $resultPromise = /** @type {any} */($Call.ByID(8704593, email, token));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = auth_service$0.User.createFrom;
const $$createType1 = auth_service$0.Token.createFrom;
