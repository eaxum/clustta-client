// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/repository/models/models.js";

export class AssetStateItem {
    /**
     * Creates a new AssetStateItem instance.
     * @param {Partial<AssetStateItem>} [$$source = {}] - The source object to create the AssetStateItem.
     */
    constructor($$source = {}) {
        if (!("task_id" in $$source)) {
            /**
             * task ID for filtering
             * @member
             * @type {string}
             */
            this["task_id"] = "";
        }
        if (!("task_path" in $$source)) {
            /**
             * for checkpoints: "path/to/file"
             * @member
             * @type {string}
             */
            this["task_path"] = "";
        }
        if (!("display_path" in $$source)) {
            /**
             * for UI: "path/to/file.blend"
             * @member
             * @type {string}
             */
            this["display_path"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AssetStateItem instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AssetStateItem}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AssetStateItem(/** @type {Partial<AssetStateItem>} */($$parsedSource));
    }
}

export class AssetsStates {
    /**
     * Creates a new AssetsStates instance.
     * @param {Partial<AssetsStates>} [$$source = {}] - The source object to create the AssetsStates.
     */
    constructor($$source = {}) {
        if (!("modified" in $$source)) {
            /**
             * @member
             * @type {AssetStateItem[]}
             */
            this["modified"] = [];
        }
        if (!("rebuildable" in $$source)) {
            /**
             * @member
             * @type {AssetStateItem[]}
             */
            this["rebuildable"] = [];
        }
        if (!("outdated" in $$source)) {
            /**
             * @member
             * @type {AssetStateItem[]}
             */
            this["outdated"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AssetsStates instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AssetsStates}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType1;
        const $$createField1_0 = $$createType1;
        const $$createField2_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("modified" in $$parsedSource) {
            $$parsedSource["modified"] = $$createField0_0($$parsedSource["modified"]);
        }
        if ("rebuildable" in $$parsedSource) {
            $$parsedSource["rebuildable"] = $$createField1_0($$parsedSource["rebuildable"]);
        }
        if ("outdated" in $$parsedSource) {
            $$parsedSource["outdated"] = $$createField2_0($$parsedSource["outdated"]);
        }
        return new AssetsStates(/** @type {Partial<AssetsStates>} */($$parsedSource));
    }
}

export class EntityItems {
    /**
     * Creates a new EntityItems instance.
     * @param {Partial<EntityItems>} [$$source = {}] - The source object to create the EntityItems.
     */
    constructor($$source = {}) {
        if (!("tasks" in $$source)) {
            /**
             * @member
             * @type {models$0.Task[]}
             */
            this["tasks"] = [];
        }
        if (!("entities" in $$source)) {
            /**
             * @member
             * @type {models$0.Entity[]}
             */
            this["entities"] = [];
        }
        if (!("untracked_tasks" in $$source)) {
            /**
             * @member
             * @type {models$0.UntrackedTask[]}
             */
            this["untracked_tasks"] = [];
        }
        if (!("untracked_entities" in $$source)) {
            /**
             * @member
             * @type {models$0.UntrackedEntity[]}
             */
            this["untracked_entities"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new EntityItems instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {EntityItems}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType2;
        const $$createField1_0 = $$createType3;
        const $$createField2_0 = $$createType4;
        const $$createField3_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("tasks" in $$parsedSource) {
            $$parsedSource["tasks"] = $$createField0_0($$parsedSource["tasks"]);
        }
        if ("entities" in $$parsedSource) {
            $$parsedSource["entities"] = $$createField1_0($$parsedSource["entities"]);
        }
        if ("untracked_tasks" in $$parsedSource) {
            $$parsedSource["untracked_tasks"] = $$createField2_0($$parsedSource["untracked_tasks"]);
        }
        if ("untracked_entities" in $$parsedSource) {
            $$parsedSource["untracked_entities"] = $$createField3_0($$parsedSource["untracked_entities"]);
        }
        return new EntityItems(/** @type {Partial<EntityItems>} */($$parsedSource));
    }
}

export class FileInfo {
    /**
     * Creates a new FileInfo instance.
     * @param {Partial<FileInfo>} [$$source = {}] - The source object to create the FileInfo.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("size" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["size"] = 0;
        }
        if (!("formattedSize" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["formattedSize"] = "";
        }
        if (!("isDir" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["isDir"] = false;
        }
        if (!("modTime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["modTime"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new FileInfo instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {FileInfo}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new FileInfo(/** @type {Partial<FileInfo>} */($$parsedSource));
    }
}

export class ImportItems {
    /**
     * Creates a new ImportItems instance.
     * @param {Partial<ImportItems>} [$$source = {}] - The source object to create the ImportItems.
     */
    constructor($$source = {}) {
        if (!("tasks" in $$source)) {
            /**
             * @member
             * @type {models$0.Task[]}
             */
            this["tasks"] = [];
        }
        if (!("entities" in $$source)) {
            /**
             * @member
             * @type {models$0.Entity[]}
             */
            this["entities"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ImportItems instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ImportItems}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType2;
        const $$createField1_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("tasks" in $$parsedSource) {
            $$parsedSource["tasks"] = $$createField0_0($$parsedSource["tasks"]);
        }
        if ("entities" in $$parsedSource) {
            $$parsedSource["entities"] = $$createField1_0($$parsedSource["entities"]);
        }
        return new ImportItems(/** @type {Partial<ImportItems>} */($$parsedSource));
    }
}

export class RecycleItem {
    /**
     * Creates a new RecycleItem instance.
     * @param {Partial<RecycleItem>} [$$source = {}] - The source object to create the RecycleItem.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("type" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["type"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("parent_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["parent_id"] = "";
        }
        if (!("parent_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["parent_name"] = "";
        }
        if (!("data" in $$source)) {
            /**
             * @member
             * @type {any}
             */
            this["data"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RecycleItem instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {RecycleItem}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new RecycleItem(/** @type {Partial<RecycleItem>} */($$parsedSource));
    }
}

export class UntrackedItems {
    /**
     * Creates a new UntrackedItems instance.
     * @param {Partial<UntrackedItems>} [$$source = {}] - The source object to create the UntrackedItems.
     */
    constructor($$source = {}) {
        if (!("tasks" in $$source)) {
            /**
             * @member
             * @type {models$0.UntrackedTask[]}
             */
            this["tasks"] = [];
        }
        if (!("entities" in $$source)) {
            /**
             * @member
             * @type {models$0.UntrackedEntity[]}
             */
            this["entities"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new UntrackedItems instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {UntrackedItems}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType4;
        const $$createField1_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("tasks" in $$parsedSource) {
            $$parsedSource["tasks"] = $$createField0_0($$parsedSource["tasks"]);
        }
        if ("entities" in $$parsedSource) {
            $$parsedSource["entities"] = $$createField1_0($$parsedSource["entities"]);
        }
        return new UntrackedItems(/** @type {Partial<UntrackedItems>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = AssetStateItem.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $Create.Array($Create.Any);
const $$createType3 = $Create.Array($Create.Any);
const $$createType4 = $Create.Array($Create.Any);
const $$createType5 = $Create.Array($Create.Any);
