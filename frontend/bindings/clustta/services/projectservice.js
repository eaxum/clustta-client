// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as repository$0 from "../internal/repository/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/repository/models/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @param {string} projectPath
 * @param {string} email
 * @param {string} roleName
 * @returns {Promise<models$0.User> & { cancel(): void }}
 */
export function AddUser(projectPath, email, roleName) {
    let $resultPromise = /** @type {any} */($Call.ByID(3138298450, projectPath, email, roleName));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} userId
 * @param {string} roleName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeRole(projectPath, userId, roleName) {
    let $resultPromise = /** @type {any} */($Call.ByID(810773794, projectPath, userId, roleName));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<void> & { cancel(): void }}
 */
export function CloseProject(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(114032371, projectPath));
    return $resultPromise;
}

/**
 * @param {string} projectUri
 * @param {string} studioName
 * @param {string} workingDir
 * @param {string} templateName
 * @returns {Promise<repository$0.ProjectInfo> & { cancel(): void }}
 */
export function CreateProject(projectUri, studioName, workingDir, templateName) {
    let $resultPromise = /** @type {any} */($Call.ByID(914775891, projectUri, studioName, workingDir, templateName));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectWorkingDir
 * @param {string} directory
 * @param {string[]} ignoreList
 * @param {string[]} tracked
 * @returns {Promise<$models.UntrackedItems> & { cancel(): void }}
 */
export function GetFolderUntrackedItems(projectWorkingDir, directory, ignoreList, tracked) {
    let $resultPromise = /** @type {any} */($Call.ByID(83768171, projectWorkingDir, directory, ignoreList, tracked));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<string[]> & { cancel(): void }}
 */
export function GetIgnoreList(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(880721004, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function GetIsClose(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(1046148786, projectPath));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetPreview(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(4275126350, projectPath));
    return $resultPromise;
}

/**
 * @param {string} url
 * @param {string} name
 * @returns {Promise<repository$0.ProjectInfo[]> & { cancel(): void }}
 */
export function GetStudioProjects(url, name) {
    let $resultPromise = /** @type {any} */($Call.ByID(155248386, url, name));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectUri
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetSyncToken(projectUri) {
    let $resultPromise = /** @type {any} */($Call.ByID(2014393022, projectUri));
    return $resultPromise;
}

/**
 * @returns {Promise<repository$0.ProjectInfo[]> & { cancel(): void }}
 */
export function GetTemplates() {
    let $resultPromise = /** @type {any} */($Call.ByID(2590730853));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} itemPath
 * @param {string[]} ignoreList
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function IsIgnored(itemPath, ignoreList) {
    let $resultPromise = /** @type {any} */($Call.ByID(2693616968, itemPath, ignoreList));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<repository$0.ProjectInfo> & { cancel(): void }}
 */
export function ProjectInfo(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(1383457795, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string[]} projectPaths
 * @returns {Promise<repository$0.ProjectInfo[]> & { cancel(): void }}
 */
export function ProjectsInfo(projectPaths) {
    let $resultPromise = /** @type {any} */($Call.ByID(686940384, projectPaths));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Purge(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(2913987721, projectPath));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} userId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveUser(projectPath, userId) {
    let $resultPromise = /** @type {any} */($Call.ByID(4241326069, projectPath, userId));
    return $resultPromise;
}

/**
 * @param {string} projectUri
 * @param {string} studioName
 * @param {string} newName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Rename(projectUri, studioName, newName) {
    let $resultPromise = /** @type {any} */($Call.ByID(4132178576, projectUri, studioName, newName));
    return $resultPromise;
}

/**
 * @param {string} projectUri
 * @param {string} studioName
 * @param {string[]} ignoreList
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetIgnoreList(projectUri, studioName, ignoreList) {
    let $resultPromise = /** @type {any} */($Call.ByID(610021480, projectUri, studioName, ignoreList));
    return $resultPromise;
}

/**
 * @param {string} projectUri
 * @param {string} studioName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ToggleCloseProject(projectUri, studioName) {
    let $resultPromise = /** @type {any} */($Call.ByID(2004355099, projectUri, studioName));
    return $resultPromise;
}

/**
 * @param {string} projectUri
 * @param {string} studioName
 * @param {string} iconValue
 * @returns {Promise<void> & { cancel(): void }}
 */
export function UpdateIcon(projectUri, studioName, iconValue) {
    let $resultPromise = /** @type {any} */($Call.ByID(3756813102, projectUri, studioName, iconValue));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} previewPath
 * @returns {Promise<void> & { cancel(): void }}
 */
export function UpdatePreview(projectPath, previewPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(1284912265, projectPath, previewPath));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} userId
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function UserInProject(projectPath, userId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3209082523, projectPath, userId));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = models$0.User.createFrom;
const $$createType1 = repository$0.ProjectInfo.createFrom;
const $$createType2 = $models.UntrackedItems.createFrom;
const $$createType3 = $Create.Array($Create.Any);
const $$createType4 = $Create.Array($$createType1);
