// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/repository/models/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @param {string} userId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Assign(projectPath, entityId, userId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2838915874, projectPath, entityId, userId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @param {string} parentId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeCollectionParent(projectPath, entityId, parentId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2168719759, projectPath, entityId, parentId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @param {boolean} isLibrary
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeIsLibrary(projectPath, entityId, isLibrary) {
    let $resultPromise = /** @type {any} */($Call.ByID(2948869046, projectPath, entityId, isLibrary));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @param {string} entityTypeId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeType(projectPath, entityId, entityTypeId) {
    let $resultPromise = /** @type {any} */($Call.ByID(489875783, projectPath, entityId, entityTypeId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} name
 * @param {string} description
 * @param {string} entityTypeId
 * @param {string} parentId
 * @param {string} previewPath
 * @param {boolean} isLibrary
 * @returns {Promise<models$0.Entity> & { cancel(): void }}
 */
export function CreateCollection(projectPath, name, description, entityTypeId, parentId, previewPath, isLibrary) {
    let $resultPromise = /** @type {any} */($Call.ByID(1857306755, projectPath, name, description, entityTypeId, parentId, previewPath, isLibrary));
    return $resultPromise;
}

/**
 * collection types
 * @param {string} projectPath
 * @param {string} entityTypeName
 * @param {string} entityTypeIcon
 * @returns {Promise<models$0.EntityType> & { cancel(): void }}
 */
export function CreateCollectionType(projectPath, entityTypeName, entityTypeIcon) {
    let $resultPromise = /** @type {any} */($Call.ByID(4202352859, projectPath, entityTypeName, entityTypeIcon));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} name
 * @param {string} description
 * @param {string} entityTypeId
 * @param {string} parentId
 * @returns {Promise<models$0.Entity[]> & { cancel(): void }}
 */
export function CreateCollections(projectPath, name, description, entityTypeId, parentId) {
    let $resultPromise = /** @type {any} */($Call.ByID(901921232, projectPath, name, description, entityTypeId, parentId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @param {boolean} removeFiles
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteCollection(projectPath, entityId, removeFiles) {
    let $resultPromise = /** @type {any} */($Call.ByID(3363308644, projectPath, entityId, removeFiles));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} id
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteCollectionType(projectPath, id) {
    let $resultPromise = /** @type {any} */($Call.ByID(2991338316, projectPath, id));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @returns {Promise<models$0.Entity> & { cancel(): void }}
 */
export function GetCollectionByID(projectPath, entityId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1116836093, projectPath, entityId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @param {string} projectWorkingDir
 * @param {string} entityFolderPath
 * @param {string[]} ignoreList
 * @param {boolean} isUntracked
 * @returns {Promise<$models.EntityItems> & { cancel(): void }}
 */
export function GetCollectionChildren(projectPath, entityId, projectWorkingDir, entityFolderPath, ignoreList, isUntracked) {
    let $resultPromise = /** @type {any} */($Call.ByID(985363246, projectPath, entityId, projectWorkingDir, entityFolderPath, ignoreList, isUntracked));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<number> & { cancel(): void }}
 */
export function GetCollectionCount(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(773498904, projectPath));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @returns {Promise<models$0.Task[]> & { cancel(): void }}
 */
export function GetCollectionTasks(projectPath, entityId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1367523417, projectPath, entityId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<models$0.EntityType[]> & { cancel(): void }}
 */
export function GetCollectionTypes(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(1279663726, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<models$0.Entity[]> & { cancel(): void }}
 */
export function GetCollections(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(1787506934, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} remoteUrl
 * @param {string} entityIds
 * @param {string} userId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Rebuild(projectPath, remoteUrl, entityIds, userId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1269618418, projectPath, remoteUrl, entityIds, userId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @param {string} newName
 * @returns {Promise<models$0.Entity> & { cancel(): void }}
 */
export function RenameCollection(projectPath, entityId, newName) {
    let $resultPromise = /** @type {any} */($Call.ByID(3064640869, projectPath, entityId, newName));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RevealCollection(projectPath, entityId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1753210934, projectPath, entityId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string[]} entityIds
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RevertCollections(projectPath, entityIds) {
    let $resultPromise = /** @type {any} */($Call.ByID(1570908726, projectPath, entityIds));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @param {string} userId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Unassign(projectPath, entityId, userId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3540910669, projectPath, entityId, userId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} id
 * @param {string} entityTypeName
 * @param {string} entityTypeIcon
 * @returns {Promise<models$0.EntityType> & { cancel(): void }}
 */
export function UpdateCollectionType(projectPath, id, entityTypeName, entityTypeIcon) {
    let $resultPromise = /** @type {any} */($Call.ByID(4261460618, projectPath, id, entityTypeName, entityTypeIcon));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} entityId
 * @param {string} previewPath
 * @returns {Promise<void> & { cancel(): void }}
 */
export function UpdatePreview(projectPath, entityId, previewPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(406683254, projectPath, entityId, previewPath));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = models$0.EntityType.createFrom;
const $$createType1 = $Create.Array($Create.Any);
const $$createType2 = $models.EntityItems.createFrom;
const $$createType3 = $Create.Array($Create.Any);
const $$createType4 = $Create.Array($$createType0);
