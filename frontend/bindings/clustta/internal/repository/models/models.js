// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class Checkpoint {
    /**
     * Creates a new Checkpoint instance.
     * @param {Partial<Checkpoint>} [$$source = {}] - The source object to create the Checkpoint.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("created_at" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["created_at"] = "";
        }
        if (!("task_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["task_id"] = "";
        }
        if (!("xxhash_checksum" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["xxhash_checksum"] = "";
        }
        if (!("time_modified" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["time_modified"] = 0;
        }
        if (!("file_size" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["file_size"] = 0;
        }
        if (!("comment" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["comment"] = "";
        }
        if (!("chunks" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["chunks"] = "";
        }
        if (!("is_downloaded" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["is_downloaded"] = false;
        }
        if (!("author_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["author_id"] = "";
        }
        if (!("group_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["group_id"] = "";
        }
        if (!("preview_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["preview_id"] = "";
        }
        if (!("preview" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["preview"] = "";
        }
        if (!("preview_extension" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["preview_extension"] = "";
        }
        if (!("trashed" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["trashed"] = false;
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Checkpoint instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Checkpoint}
     */
    static createFrom($$source = {}) {
        const $$createField13_0 = $Create.ByteSlice;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("preview" in $$parsedSource) {
            $$parsedSource["preview"] = $$createField13_0($$parsedSource["preview"]);
        }
        return new Checkpoint(/** @type {Partial<Checkpoint>} */($$parsedSource));
    }
}

export class DependencyType {
    /**
     * Creates a new DependencyType instance.
     * @param {Partial<DependencyType>} [$$source = {}] - The source object to create the DependencyType.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DependencyType instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DependencyType}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DependencyType(/** @type {Partial<DependencyType>} */($$parsedSource));
    }
}

/**
 * @typedef {any} Entity
 */

export class EntityType {
    /**
     * Creates a new EntityType instance.
     * @param {Partial<EntityType>} [$$source = {}] - The source object to create the EntityType.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("icon" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["icon"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new EntityType instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {EntityType}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new EntityType(/** @type {Partial<EntityType>} */($$parsedSource));
    }
}

export class Role {
    /**
     * Creates a new Role instance.
     * @param {Partial<Role>} [$$source = {}] - The source object to create the Role.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }
        if (!("view_entity" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["view_entity"] = false;
        }
        if (!("create_entity" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["create_entity"] = false;
        }
        if (!("update_entity" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["update_entity"] = false;
        }
        if (!("delete_entity" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["delete_entity"] = false;
        }
        if (!("view_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["view_task"] = false;
        }
        if (!("create_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["create_task"] = false;
        }
        if (!("update_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["update_task"] = false;
        }
        if (!("delete_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["delete_task"] = false;
        }
        if (!("view_template" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["view_template"] = false;
        }
        if (!("create_template" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["create_template"] = false;
        }
        if (!("update_template" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["update_template"] = false;
        }
        if (!("delete_template" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["delete_template"] = false;
        }
        if (!("view_checkpoint" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["view_checkpoint"] = false;
        }
        if (!("create_checkpoint" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["create_checkpoint"] = false;
        }
        if (!("delete_checkpoint" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["delete_checkpoint"] = false;
        }
        if (!("pull_chunk" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["pull_chunk"] = false;
        }
        if (!("assign_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["assign_task"] = false;
        }
        if (!("unassign_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["unassign_task"] = false;
        }
        if (!("add_user" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["add_user"] = false;
        }
        if (!("remove_user" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["remove_user"] = false;
        }
        if (!("change_role" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["change_role"] = false;
        }
        if (!("change_status" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["change_status"] = false;
        }
        if (!("set_done_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["set_done_task"] = false;
        }
        if (!("set_retake_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["set_retake_task"] = false;
        }
        if (!("view_done_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["view_done_task"] = false;
        }
        if (!("manage_dependencies" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["manage_dependencies"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Role instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Role}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Role(/** @type {Partial<Role>} */($$parsedSource));
    }
}

export class RoleAttributes {
    /**
     * Creates a new RoleAttributes instance.
     * @param {Partial<RoleAttributes>} [$$source = {}] - The source object to create the RoleAttributes.
     */
    constructor($$source = {}) {
        if (!("view_entity" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["view_entity"] = false;
        }
        if (!("create_entity" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["create_entity"] = false;
        }
        if (!("update_entity" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["update_entity"] = false;
        }
        if (!("delete_entity" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["delete_entity"] = false;
        }
        if (!("view_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["view_task"] = false;
        }
        if (!("create_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["create_task"] = false;
        }
        if (!("update_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["update_task"] = false;
        }
        if (!("delete_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["delete_task"] = false;
        }
        if (!("view_template" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["view_template"] = false;
        }
        if (!("create_template" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["create_template"] = false;
        }
        if (!("update_template" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["update_template"] = false;
        }
        if (!("delete_template" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["delete_template"] = false;
        }
        if (!("view_checkpoint" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["view_checkpoint"] = false;
        }
        if (!("create_checkpoint" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["create_checkpoint"] = false;
        }
        if (!("delete_checkpoint" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["delete_checkpoint"] = false;
        }
        if (!("pull_chunk" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["pull_chunk"] = false;
        }
        if (!("assign_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["assign_task"] = false;
        }
        if (!("unassign_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["unassign_task"] = false;
        }
        if (!("add_user" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["add_user"] = false;
        }
        if (!("remove_user" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["remove_user"] = false;
        }
        if (!("change_role" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["change_role"] = false;
        }
        if (!("change_status" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["change_status"] = false;
        }
        if (!("set_done_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["set_done_task"] = false;
        }
        if (!("set_retake_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["set_retake_task"] = false;
        }
        if (!("view_done_task" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["view_done_task"] = false;
        }
        if (!("manage_dependencies" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["manage_dependencies"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RoleAttributes instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {RoleAttributes}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new RoleAttributes(/** @type {Partial<RoleAttributes>} */($$parsedSource));
    }
}

export class Status {
    /**
     * Creates a new Status instance.
     * @param {Partial<Status>} [$$source = {}] - The source object to create the Status.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("short_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["short_name"] = "";
        }
        if (!("color" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["color"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Status instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Status}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Status(/** @type {Partial<Status>} */($$parsedSource));
    }
}

export class Tag {
    /**
     * Creates a new Tag instance.
     * @param {Partial<Tag>} [$$source = {}] - The source object to create the Tag.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Tag instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Tag}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Tag(/** @type {Partial<Tag>} */($$parsedSource));
    }
}

/**
 * @typedef {any} Task
 */

export class TaskDependency {
    /**
     * Creates a new TaskDependency instance.
     * @param {Partial<TaskDependency>} [$$source = {}] - The source object to create the TaskDependency.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("task_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["task_id"] = "";
        }
        if (!("dependency_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["dependency_id"] = "";
        }
        if (!("dependency_type_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["dependency_type_id"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TaskDependency instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {TaskDependency}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TaskDependency(/** @type {Partial<TaskDependency>} */($$parsedSource));
    }
}

export class TaskType {
    /**
     * Creates a new TaskType instance.
     * @param {Partial<TaskType>} [$$source = {}] - The source object to create the TaskType.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("icon" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["icon"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TaskType instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {TaskType}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TaskType(/** @type {Partial<TaskType>} */($$parsedSource));
    }
}

export class Template {
    /**
     * Creates a new Template instance.
     * @param {Partial<Template>} [$$source = {}] - The source object to create the Template.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("extension" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["extension"] = "";
        }
        if (!("chunks" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["chunks"] = "";
        }
        if (!("xxhash_checksum" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["xxhash_checksum"] = "";
        }
        if (!("file_size" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["file_size"] = 0;
        }
        if (!("trashed" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["trashed"] = false;
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Template instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Template}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Template(/** @type {Partial<Template>} */($$parsedSource));
    }
}

/**
 * @typedef {any} UntrackedEntity
 */

/**
 * @typedef {any} UntrackedTask
 */

export class User {
    /**
     * Creates a new User instance.
     * @param {Partial<User>} [$$source = {}] - The source object to create the User.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("added_at" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["added_at"] = "";
        }
        if (!("username" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["username"] = "";
        }
        if (!("email" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["email"] = "";
        }
        if (!("first_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["first_name"] = "";
        }
        if (!("last_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["last_name"] = "";
        }
        if (!("photo" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["photo"] = "";
        }
        if (!("role_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["role_id"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }
        if (!("role" in $$source)) {
            /**
             * @member
             * @type {Role}
             */
            this["role"] = (new Role());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new User instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {User}
     */
    static createFrom($$source = {}) {
        const $$createField7_0 = $Create.ByteSlice;
        const $$createField10_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("photo" in $$parsedSource) {
            $$parsedSource["photo"] = $$createField7_0($$parsedSource["photo"]);
        }
        if ("role" in $$parsedSource) {
            $$parsedSource["role"] = $$createField10_0($$parsedSource["role"]);
        }
        return new User(/** @type {Partial<User>} */($$parsedSource));
    }
}

export class Workflow {
    /**
     * Creates a new Workflow instance.
     * @param {Partial<Workflow>} [$$source = {}] - The source object to create the Workflow.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }
        if (!("tasks" in $$source)) {
            /**
             * @member
             * @type {WorkflowTask[]}
             */
            this["tasks"] = [];
        }
        if (!("entities" in $$source)) {
            /**
             * @member
             * @type {WorkflowEntity[]}
             */
            this["entities"] = [];
        }
        if (!("links" in $$source)) {
            /**
             * @member
             * @type {WorkflowLink[]}
             */
            this["links"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Workflow instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Workflow}
     */
    static createFrom($$source = {}) {
        const $$createField4_0 = $$createType2;
        const $$createField5_0 = $$createType4;
        const $$createField6_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("tasks" in $$parsedSource) {
            $$parsedSource["tasks"] = $$createField4_0($$parsedSource["tasks"]);
        }
        if ("entities" in $$parsedSource) {
            $$parsedSource["entities"] = $$createField5_0($$parsedSource["entities"]);
        }
        if ("links" in $$parsedSource) {
            $$parsedSource["links"] = $$createField6_0($$parsedSource["links"]);
        }
        return new Workflow(/** @type {Partial<Workflow>} */($$parsedSource));
    }
}

export class WorkflowEntity {
    /**
     * Creates a new WorkflowEntity instance.
     * @param {Partial<WorkflowEntity>} [$$source = {}] - The source object to create the WorkflowEntity.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("workflow_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["workflow_id"] = "";
        }
        if (!("entity_type_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["entity_type_id"] = "";
        }
        if (!("parent_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["parent_id"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new WorkflowEntity instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {WorkflowEntity}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new WorkflowEntity(/** @type {Partial<WorkflowEntity>} */($$parsedSource));
    }
}

export class WorkflowLink {
    /**
     * Creates a new WorkflowLink instance.
     * @param {Partial<WorkflowLink>} [$$source = {}] - The source object to create the WorkflowLink.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("entity_type_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["entity_type_id"] = "";
        }
        if (!("workflow_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["workflow_id"] = "";
        }
        if (!("linked_workflow_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["linked_workflow_id"] = "";
        }
        if (!("linked_workflow_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["linked_workflow_name"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new WorkflowLink instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {WorkflowLink}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new WorkflowLink(/** @type {Partial<WorkflowLink>} */($$parsedSource));
    }
}

export class WorkflowTask {
    /**
     * Creates a new WorkflowTask instance.
     * @param {Partial<WorkflowTask>} [$$source = {}] - The source object to create the WorkflowTask.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("mtime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["mtime"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("template_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["template_id"] = "";
        }
        if (!("is_resource" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["is_resource"] = false;
        }
        if (!("workflow_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["workflow_id"] = "";
        }
        if (!("task_type_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["task_type_id"] = "";
        }
        if (!("workflow_entity_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["workflow_entity_id"] = "";
        }
        if (!("is_link" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["is_link"] = false;
        }
        if (!("pointer" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["pointer"] = "";
        }
        if (!("synced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["synced"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new WorkflowTask instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {WorkflowTask}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new WorkflowTask(/** @type {Partial<WorkflowTask>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = Role.createFrom;
const $$createType1 = WorkflowTask.createFrom;
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = WorkflowEntity.createFrom;
const $$createType4 = $Create.Array($$createType3);
const $$createType5 = WorkflowLink.createFrom;
const $$createType6 = $Create.Array($$createType5);
