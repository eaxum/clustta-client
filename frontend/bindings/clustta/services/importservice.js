// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/repository/models/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @param {string} projectPath
 * @param {models$0.Entity[]} entities
 * @param {number} completed
 * @param {number} totalEntities
 * @returns {Promise<void> & { cancel(): void }}
 */
export function CreateEntities(projectPath, entities, completed, totalEntities) {
    let $resultPromise = /** @type {any} */($Call.ByID(1462445845, projectPath, entities, completed, totalEntities));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {models$0.Entity[]} entities
 * @param {models$0.Task[]} tasks
 * @param {string} comment
 * @param {string} groupId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function CreateItems(projectPath, entities, tasks, comment, groupId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1562194358, projectPath, entities, tasks, comment, groupId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {models$0.Task[]} tasks
 * @param {number} completed
 * @param {number} totalTasks
 * @param {string} comment
 * @param {string} groupId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function CreateTasks(projectPath, tasks, completed, totalTasks, comment, groupId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3633228444, projectPath, tasks, completed, totalTasks, comment, groupId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} parentId
 * @param {string[]} folders
 * @param {string[]} files
 * @param {string} projectWorkingDir
 * @param {string[]} ignoreList
 * @returns {Promise<$models.ImportItems> & { cancel(): void }}
 */
export function ImportFolder(projectPath, parentId, folders, files, projectWorkingDir, ignoreList) {
    let $resultPromise = /** @type {any} */($Call.ByID(2443458599, projectPath, parentId, folders, files, projectWorkingDir, ignoreList));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = $models.ImportItems.createFrom;
