// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/repository/models/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * dependencies
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} dependencyId
 * @param {string} dependencyTypeId
 * @returns {Promise<models$0.TaskDependency> & { cancel(): void }}
 */
export function AddEntityDependency(projectPath, taskId, dependencyId, dependencyTypeId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2079808687, projectPath, taskId, dependencyId, dependencyTypeId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} previewPath
 * @returns {Promise<models$0.Task> & { cancel(): void }}
 */
export function AddPreview(projectPath, taskId, previewPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(57241959, projectPath, taskId, previewPath));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} dependencyId
 * @param {string} dependencyTypeId
 * @returns {Promise<models$0.TaskDependency> & { cancel(): void }}
 */
export function AddTaskDependency(projectPath, taskId, dependencyId, dependencyTypeId) {
    let $resultPromise = /** @type {any} */($Call.ByID(658233541, projectPath, taskId, dependencyId, dependencyTypeId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} userId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AssignTask(projectPath, taskId, userId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1592692070, projectPath, taskId, userId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} statusId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeStatus(projectPath, taskId, statusId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1901582300, projectPath, taskId, statusId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} entityId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeTaskEntity(projectPath, taskId, entityId) {
    let $resultPromise = /** @type {any} */($Call.ByID(573078664, projectPath, taskId, entityId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} taskTypeId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeTaskType(projectPath, taskId, taskTypeId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3975614759, projectPath, taskId, taskTypeId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} name
 * @param {string} description
 * @param {string} taskTypeId
 * @param {string} entityId
 * @param {boolean} isResource
 * @param {string} templateId
 * @param {string} templateFilePath
 * @param {string} pointer
 * @param {boolean} isLink
 * @param {string[]} tags
 * @param {string} previewPath
 * @param {string} comment
 * @returns {Promise<models$0.Task> & { cancel(): void }}
 */
export function CreateTask(projectPath, name, description, taskTypeId, entityId, isResource, templateId, templateFilePath, pointer, isLink, tags, previewPath, comment) {
    let $resultPromise = /** @type {any} */($Call.ByID(1931795311, projectPath, name, description, taskTypeId, entityId, isResource, templateId, templateFilePath, pointer, isLink, tags, previewPath, comment));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} name
 * @param {string} icon
 * @returns {Promise<models$0.TaskType> & { cancel(): void }}
 */
export function CreateTaskType(projectPath, name, icon) {
    let $resultPromise = /** @type {any} */($Call.ByID(2862188343, projectPath, name, icon));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {boolean} removeFiles
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteTask(projectPath, taskId, removeFiles) {
    let $resultPromise = /** @type {any} */($Call.ByID(439895824, projectPath, taskId, removeFiles));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} id
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteTaskType(projectPath, id) {
    let $resultPromise = /** @type {any} */($Call.ByID(1594721336, projectPath, id));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} sourceTaskId
 * @returns {Promise<models$0.Task> & { cancel(): void }}
 */
export function DuplicateTask(projectPath, sourceTaskId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3380275022, projectPath, sourceTaskId));
    return $resultPromise;
}

/**
 * GetAssetTasks gets all tasks where is_resource is false with minimal fields for UI display
 * @param {string} projectPath
 * @returns {Promise<models$0.Task[]> & { cancel(): void }}
 */
export function GetAssetTasks(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(956150776, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} projectWorkingDir
 * @param {string[]} ignoreList
 * @returns {Promise<$models.AssetsStates> & { cancel(): void }}
 */
export function GetAssetsStates(projectPath, projectWorkingDir, ignoreList) {
    let $resultPromise = /** @type {any} */($Call.ByID(2035124169, projectPath, projectWorkingDir, ignoreList));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {number} maxDepth
 * @returns {Promise<any[]> & { cancel(): void }}
 */
export function GetRecursiveDependencies(projectPath, taskId, maxDepth) {
    let $resultPromise = /** @type {any} */($Call.ByID(1013059747, projectPath, taskId, maxDepth));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<number> & { cancel(): void }}
 */
export function GetTaskCount(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(165191286, projectPath));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string[]} taskIds
 * @returns {Promise<any[]> & { cancel(): void }}
 */
export function GetTaskDependencies(projectPath, taskIds) {
    let $resultPromise = /** @type {any} */($Call.ByID(3819122714, projectPath, taskIds));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string[]} taskIds
 * @returns {Promise<models$0.Task[]> & { cancel(): void }}
 */
export function GetTaskDependencies2(projectPath, taskIds) {
    let $resultPromise = /** @type {any} */($Call.ByID(2179256056, projectPath, taskIds));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * task types
 * @param {string} projectPath
 * @returns {Promise<models$0.TaskType[]> & { cancel(): void }}
 */
export function GetTaskTypes(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(1292368460, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType5($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<models$0.Task[]> & { cancel(): void }}
 */
export function GetTasks(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(2597102420, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetTasksPB(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(2745590538, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $Create.ByteSlice($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} projectWorkingDir
 * @param {string[]} ignoreList
 * @returns {Promise<string[]> & { cancel(): void }}
 */
export function GetUntrackedFiles(projectPath, projectWorkingDir, ignoreList) {
    let $resultPromise = /** @type {any} */($Call.ByID(2061405540, projectPath, projectWorkingDir, ignoreList));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType6($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} dependencyId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveEntityDependency(projectPath, taskId, dependencyId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1730012840, projectPath, taskId, dependencyId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} dependencyId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveTaskDependency(projectPath, taskId, dependencyId) {
    let $resultPromise = /** @type {any} */($Call.ByID(929027242, projectPath, taskId, dependencyId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} name
 * @returns {Promise<models$0.Task> & { cancel(): void }}
 */
export function RenameTask(projectPath, taskId, name) {
    let $resultPromise = /** @type {any} */($Call.ByID(1715890325, projectPath, taskId, name));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RevealTask(projectPath, taskId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3456753802, projectPath, taskId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @returns {Promise<string> & { cancel(): void }}
 */
export function TaskFileStatus(projectPath, taskId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3832012991, projectPath, taskId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string[]} taskIds
 * @returns {Promise<{ [_: string]: string }> & { cancel(): void }}
 */
export function TaskFilesStatus(projectPath, taskIds) {
    let $resultPromise = /** @type {any} */($Call.ByID(1455559164, projectPath, taskIds));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType7($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function TestData() {
    let $resultPromise = /** @type {any} */($Call.ByID(990698894));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string[]} taskIds
 * @param {boolean} isResource
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ToggleIsResource(projectPath, taskIds, isResource) {
    let $resultPromise = /** @type {any} */($Call.ByID(3609164234, projectPath, taskIds, isResource));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {boolean} isTask
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ToggleIsTask(projectPath, taskId, isTask) {
    let $resultPromise = /** @type {any} */($Call.ByID(2831225231, projectPath, taskId, isTask));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function UnassignTask(projectPath, taskId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3746757145, projectPath, taskId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} name
 * @param {string} taskTypeId
 * @param {boolean} isResource
 * @param {string} pointer
 * @param {string[]} tags
 * @returns {Promise<models$0.Task> & { cancel(): void }}
 */
export function UpdateTask(projectPath, taskId, name, taskTypeId, isResource, pointer, tags) {
    let $resultPromise = /** @type {any} */($Call.ByID(4026603718, projectPath, taskId, name, taskTypeId, isResource, pointer, tags));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} id
 * @param {string} name
 * @param {string} icon
 * @returns {Promise<models$0.TaskType> & { cancel(): void }}
 */
export function UpdateTaskType(projectPath, id, name, icon) {
    let $resultPromise = /** @type {any} */($Call.ByID(1929056854, projectPath, id, name, icon));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = models$0.TaskDependency.createFrom;
const $$createType1 = models$0.TaskType.createFrom;
const $$createType2 = $Create.Array($Create.Any);
const $$createType3 = $models.AssetsStates.createFrom;
const $$createType4 = $Create.Array($Create.Any);
const $$createType5 = $Create.Array($$createType1);
const $$createType6 = $Create.Array($Create.Any);
const $$createType7 = $Create.Map($Create.Any, $Create.Any);
