// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/server/models/models.js";

/**
 * @param {string} email
 * @param {string} studioId
 * @param {string} roleName
 * @returns {Promise<any> & { cancel(): void }}
 */
export function AddCollaborator(email, studioId, roleName) {
    let $resultPromise = /** @type {any} */($Call.ByID(4189063428, email, studioId, roleName));
    return $resultPromise;
}

/**
 * @param {string} userId
 * @param {string} studioId
 * @param {string} roleName
 * @returns {Promise<any> & { cancel(): void }}
 */
export function ChangeCollaboratorRole(userId, studioId, roleName) {
    let $resultPromise = /** @type {any} */($Call.ByID(3078107829, userId, studioId, roleName));
    return $resultPromise;
}

/**
 * @param {string} name
 * @returns {Promise<any> & { cancel(): void }}
 */
export function CreateStudio(name) {
    let $resultPromise = /** @type {any} */($Call.ByID(3767455119, name));
    return $resultPromise;
}

/**
 * @param {string} studioUrl
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetStudioStatus(studioUrl) {
    let $resultPromise = /** @type {any} */($Call.ByID(2383284123, studioUrl));
    return $resultPromise;
}

/**
 * @param {string} studioId
 * @returns {Promise<models$0.StudioUserInfo[]> & { cancel(): void }}
 */
export function GetStudioUsers(studioId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3707174447, studioId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} userId
 * @param {string} studioId
 * @returns {Promise<any> & { cancel(): void }}
 */
export function RemoveCollaborator(userId, studioId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3776272057, userId, studioId));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = models$0.StudioUserInfo.createFrom;
const $$createType1 = $Create.Array($$createType0);
