// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class CompatTimeline {
    /**
     * Creates a new CompatTimeline instance.
     * @param {Partial<CompatTimeline>} [$$source = {}] - The source object to create the CompatTimeline.
     */
    constructor($$source = {}) {
        if (!("created_at" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["created_at"] = "";
        }
        if (!("task_paths" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["task_paths"] = [];
        }
        if (!("group_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["group_id"] = "";
        }
        if (!("comment" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["comment"] = "";
        }
        if (!("author_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["author_id"] = "";
        }
        if (!("preview" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["preview"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CompatTimeline instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {CompatTimeline}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType0;
        const $$createField5_0 = $Create.ByteSlice;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("task_paths" in $$parsedSource) {
            $$parsedSource["task_paths"] = $$createField1_0($$parsedSource["task_paths"]);
        }
        if ("preview" in $$parsedSource) {
            $$parsedSource["preview"] = $$createField5_0($$parsedSource["preview"]);
        }
        return new CompatTimeline(/** @type {Partial<CompatTimeline>} */($$parsedSource));
    }
}

export class ProjectInfo {
    /**
     * Creates a new ProjectInfo instance.
     * @param {Partial<ProjectInfo>} [$$source = {}] - The source object to create the ProjectInfo.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("sync_token" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["sync_token"] = "";
        }
        if (!("preview_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["preview_id"] = "";
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("icon" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["icon"] = "";
        }
        if (!("version" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["version"] = 0;
        }
        if (!("uri" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["uri"] = "";
        }
        if (!("working_directory" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["working_directory"] = "";
        }
        if (!("remote" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["remote"] = "";
        }
        if (!("valid" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["valid"] = false;
        }
        if (!("status" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["status"] = "";
        }
        if (!("has_remote" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["has_remote"] = false;
        }
        if (!("is_unsynced" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["is_unsynced"] = false;
        }
        if (!("is_downloaded" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["is_downloaded"] = false;
        }
        if (!("is_closed" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["is_closed"] = false;
        }
        if (!("is_outdated" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["is_outdated"] = false;
        }
        if (!("ignore_list" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["ignore_list"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ProjectInfo instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ProjectInfo}
     */
    static createFrom($$source = {}) {
        const $$createField16_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("ignore_list" in $$parsedSource) {
            $$parsedSource["ignore_list"] = $$createField16_0($$parsedSource["ignore_list"]);
        }
        return new ProjectInfo(/** @type {Partial<ProjectInfo>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
