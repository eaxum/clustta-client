// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/repository/models/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} dependencyId
 * @param {string} dependencyTypeId
 * @returns {Promise<models$0.TaskDependency> & { cancel(): void }}
 */
export function AddAssetDependency(projectPath, taskId, dependencyId, dependencyTypeId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1782495003, projectPath, taskId, dependencyId, dependencyTypeId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * dependencies
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} dependencyId
 * @param {string} dependencyTypeId
 * @returns {Promise<models$0.TaskDependency> & { cancel(): void }}
 */
export function AddEntityDependency(projectPath, taskId, dependencyId, dependencyTypeId) {
    let $resultPromise = /** @type {any} */($Call.ByID(4021458000, projectPath, taskId, dependencyId, dependencyTypeId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} previewPath
 * @returns {Promise<models$0.Task> & { cancel(): void }}
 */
export function AddPreview(projectPath, taskId, previewPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(3759703590, projectPath, taskId, previewPath));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @returns {Promise<string> & { cancel(): void }}
 */
export function AssetFileStatus(projectPath, taskId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1128980665, projectPath, taskId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string[]} taskIds
 * @returns {Promise<{ [_: string]: string }> & { cancel(): void }}
 */
export function AssetFilesStatus(projectPath, taskIds) {
    let $resultPromise = /** @type {any} */($Call.ByID(3141819454, projectPath, taskIds));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} userId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AssignAsset(projectPath, taskId, userId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1650043410, projectPath, taskId, userId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} entityId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeAssetCollection(projectPath, taskId, entityId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1344461689, projectPath, taskId, entityId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} taskTypeId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeAssetType(projectPath, taskId, taskTypeId) {
    let $resultPromise = /** @type {any} */($Call.ByID(568329317, projectPath, taskId, taskTypeId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} statusId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeStatus(projectPath, taskId, statusId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2581918589, projectPath, taskId, statusId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} name
 * @param {string} description
 * @param {string} taskTypeId
 * @param {string} entityId
 * @param {boolean} isResource
 * @param {string} templateId
 * @param {string} templateFilePath
 * @param {string} pointer
 * @param {boolean} isLink
 * @param {string[]} tags
 * @param {string} previewPath
 * @param {string} comment
 * @returns {Promise<models$0.Task> & { cancel(): void }}
 */
export function CreateAsset(projectPath, name, description, taskTypeId, entityId, isResource, templateId, templateFilePath, pointer, isLink, tags, previewPath, comment) {
    let $resultPromise = /** @type {any} */($Call.ByID(3537301857, projectPath, name, description, taskTypeId, entityId, isResource, templateId, templateFilePath, pointer, isLink, tags, previewPath, comment));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} name
 * @param {string} icon
 * @returns {Promise<models$0.TaskType> & { cancel(): void }}
 */
export function CreateAssetType(projectPath, name, icon) {
    let $resultPromise = /** @type {any} */($Call.ByID(2315337865, projectPath, name, icon));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {boolean} removeFiles
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteAsset(projectPath, taskId, removeFiles) {
    let $resultPromise = /** @type {any} */($Call.ByID(3374367108, projectPath, taskId, removeFiles));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} id
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteAssetType(projectPath, id) {
    let $resultPromise = /** @type {any} */($Call.ByID(1866707372, projectPath, id));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} sourceTaskId
 * @returns {Promise<models$0.Task> & { cancel(): void }}
 */
export function DuplicateAsset(projectPath, sourceTaskId) {
    let $resultPromise = /** @type {any} */($Call.ByID(301515392, projectPath, sourceTaskId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<number> & { cancel(): void }}
 */
export function GetAssetCount(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(4117607374, projectPath));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string[]} taskIds
 * @returns {Promise<any[]> & { cancel(): void }}
 */
export function GetAssetDependencies(projectPath, taskIds) {
    let $resultPromise = /** @type {any} */($Call.ByID(2929165906, projectPath, taskIds));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string[]} taskIds
 * @returns {Promise<models$0.Task[]> & { cancel(): void }}
 */
export function GetAssetDependencies2(projectPath, taskIds) {
    let $resultPromise = /** @type {any} */($Call.ByID(948472096, projectPath, taskIds));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetAssetTasks gets all tasks where is_resource is false with minimal fields for UI display
 * @param {string} projectPath
 * @returns {Promise<models$0.Task[]> & { cancel(): void }}
 */
export function GetAssetTasks(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(173054263, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * asset types
 * @param {string} projectPath
 * @returns {Promise<models$0.TaskType[]> & { cancel(): void }}
 */
export function GetAssetTypes(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(3278131604, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType5($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<models$0.Task[]> & { cancel(): void }}
 */
export function GetAssets(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(4140153068, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetAssetsPB(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(2358901634, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $Create.ByteSlice($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} projectWorkingDir
 * @param {string[]} ignoreList
 * @returns {Promise<$models.AssetsStates> & { cancel(): void }}
 */
export function GetAssetsStates(projectPath, projectWorkingDir, ignoreList) {
    let $resultPromise = /** @type {any} */($Call.ByID(4116784294, projectPath, projectWorkingDir, ignoreList));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType6($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {number} maxDepth
 * @returns {Promise<any[]> & { cancel(): void }}
 */
export function GetRecursiveDependencies(projectPath, taskId, maxDepth) {
    let $resultPromise = /** @type {any} */($Call.ByID(2219419678, projectPath, taskId, maxDepth));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} projectWorkingDir
 * @param {string[]} ignoreList
 * @returns {Promise<string[]> & { cancel(): void }}
 */
export function GetUntrackedFiles(projectPath, projectWorkingDir, ignoreList) {
    let $resultPromise = /** @type {any} */($Call.ByID(1088682931, projectPath, projectWorkingDir, ignoreList));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType7($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} dependencyId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveAssetDependency(projectPath, taskId, dependencyId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2690010132, projectPath, taskId, dependencyId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} dependencyId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveEntityDependency(projectPath, taskId, dependencyId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2303119221, projectPath, taskId, dependencyId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} name
 * @returns {Promise<models$0.Task> & { cancel(): void }}
 */
export function RenameAsset(projectPath, taskId, name) {
    let $resultPromise = /** @type {any} */($Call.ByID(2068335707, projectPath, taskId, name));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RevealAsset(projectPath, taskId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1172749270, projectPath, taskId));
    return $resultPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function TestData() {
    let $resultPromise = /** @type {any} */($Call.ByID(605945379));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string[]} taskIds
 * @param {boolean} isResource
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ToggleIsResource(projectPath, taskIds, isResource) {
    let $resultPromise = /** @type {any} */($Call.ByID(3235593635, projectPath, taskIds, isResource));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {boolean} isTask
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ToggleIsTask(projectPath, taskId, isTask) {
    let $resultPromise = /** @type {any} */($Call.ByID(1903957406, projectPath, taskId, isTask));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function UnassignAsset(projectPath, taskId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2170415471, projectPath, taskId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @param {string} name
 * @param {string} taskTypeId
 * @param {boolean} isResource
 * @param {string} pointer
 * @param {string[]} tags
 * @returns {Promise<models$0.Task> & { cancel(): void }}
 */
export function UpdateAsset(projectPath, taskId, name, taskTypeId, isResource, pointer, tags) {
    let $resultPromise = /** @type {any} */($Call.ByID(2839243450, projectPath, taskId, name, taskTypeId, isResource, pointer, tags));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} id
 * @param {string} name
 * @param {string} icon
 * @returns {Promise<models$0.TaskType> & { cancel(): void }}
 */
export function UpdateAssetType(projectPath, id, name, icon) {
    let $resultPromise = /** @type {any} */($Call.ByID(865399386, projectPath, id, name, icon));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = models$0.TaskDependency.createFrom;
const $$createType1 = $Create.Map($Create.Any, $Create.Any);
const $$createType2 = models$0.TaskType.createFrom;
const $$createType3 = $Create.Array($Create.Any);
const $$createType4 = $Create.Array($Create.Any);
const $$createType5 = $Create.Array($$createType2);
const $$createType6 = $models.AssetsStates.createFrom;
const $$createType7 = $Create.Array($Create.Any);
