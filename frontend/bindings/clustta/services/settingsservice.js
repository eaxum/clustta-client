// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as settings$0 from "../internal/settings/models.js";

/**
 * @param {string} projectId
 * @param {any} workspaceData
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddProjectWorkspace(projectId, workspaceData) {
    let $resultPromise = /** @type {any} */($Call.ByID(4073366007, projectId, workspaceData));
    return $resultPromise;
}

/**
 * @param {string} studioName
 * @param {string} projectId
 * @returns {Promise<string[]> & { cancel(): void }}
 */
export function AddRecentProject(studioName, projectId) {
    let $resultPromise = /** @type {any} */($Call.ByID(762029095, studioName, projectId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} studioName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ClearRecentProject(studioName) {
    let $resultPromise = /** @type {any} */($Call.ByID(2255147105, studioName));
    return $resultPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetCurrentVersion() {
    let $resultPromise = /** @type {any} */($Call.ByID(2344331797));
    return $resultPromise;
}

/**
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function GetEulaAccepted() {
    let $resultPromise = /** @type {any} */($Call.ByID(3424798202));
    return $resultPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetIconScheme() {
    let $resultPromise = /** @type {any} */($Call.ByID(636356804));
    return $resultPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetLastStudio() {
    let $resultPromise = /** @type {any} */($Call.ByID(1532016140));
    return $resultPromise;
}

/**
 * @param {string} studioName
 * @returns {Promise<string[]> & { cancel(): void }}
 */
export function GetPinnedProjects(studioName) {
    let $resultPromise = /** @type {any} */($Call.ByID(13254414, studioName));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetProjectDirectory() {
    let $resultPromise = /** @type {any} */($Call.ByID(119555146));
    return $resultPromise;
}

/**
 * @param {string} projectId
 * @returns {Promise<any[]> & { cancel(): void }}
 */
export function GetProjectWorkspaces(projectId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2164081225, projectId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} studioName
 * @returns {Promise<string[]> & { cancel(): void }}
 */
export function GetRecentProjects(studioName) {
    let $resultPromise = /** @type {any} */($Call.ByID(2190435435, studioName));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetSharedProjectDirectory() {
    let $resultPromise = /** @type {any} */($Call.ByID(952704375));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<settings$0.Studio[]> & { cancel(): void }}
 */
export function GetStudios(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(2852753313, path));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetTheme() {
    let $resultPromise = /** @type {any} */($Call.ByID(3632431035));
    return $resultPromise;
}

/**
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function GetUseAltUrl() {
    let $resultPromise = /** @type {any} */($Call.ByID(4254852621));
    return $resultPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetUserDirectory() {
    let $resultPromise = /** @type {any} */($Call.ByID(3623047360));
    return $resultPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetUsername() {
    let $resultPromise = /** @type {any} */($Call.ByID(50562878));
    return $resultPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetWorkingDirectory() {
    let $resultPromise = /** @type {any} */($Call.ByID(1696233652));
    return $resultPromise;
}

/**
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function IsProjectGridView() {
    let $resultPromise = /** @type {any} */($Call.ByID(809995474));
    return $resultPromise;
}

/**
 * @param {string} studioName
 * @param {string} projectId
 * @returns {Promise<string[]> & { cancel(): void }}
 */
export function PinProject(studioName, projectId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2392329694, studioName, projectId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectId
 * @param {string} workspaceName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveProjectWorkspace(projectId, workspaceName) {
    let $resultPromise = /** @type {any} */($Call.ByID(2360960656, projectId, workspaceName));
    return $resultPromise;
}

/**
 * @param {string} versionNumber
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetCurrentVersion(versionNumber) {
    let $resultPromise = /** @type {any} */($Call.ByID(3579646225, versionNumber));
    return $resultPromise;
}

/**
 * @param {boolean} eulaAccepted
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetEulaAccepted(eulaAccepted) {
    let $resultPromise = /** @type {any} */($Call.ByID(3565249198, eulaAccepted));
    return $resultPromise;
}

/**
 * @param {string} iconScheme
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetIconScheme(iconScheme) {
    let $resultPromise = /** @type {any} */($Call.ByID(2125293608, iconScheme));
    return $resultPromise;
}

/**
 * @param {string} lastStudioName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetLastStudio(lastStudioName) {
    let $resultPromise = /** @type {any} */($Call.ByID(4086447016, lastStudioName));
    return $resultPromise;
}

/**
 * @param {string} dir
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetProjectDirectory(dir) {
    let $resultPromise = /** @type {any} */($Call.ByID(3694495326, dir));
    return $resultPromise;
}

/**
 * @param {string} dir
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetSharedProjectDirectory(dir) {
    let $resultPromise = /** @type {any} */($Call.ByID(2608064267, dir));
    return $resultPromise;
}

/**
 * @param {string} theme
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetTheme(theme) {
    let $resultPromise = /** @type {any} */($Call.ByID(694474447, theme));
    return $resultPromise;
}

/**
 * @param {boolean} useAltUrl
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetUseAltUrl(useAltUrl) {
    let $resultPromise = /** @type {any} */($Call.ByID(3141402273, useAltUrl));
    return $resultPromise;
}

/**
 * @param {string} dir
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetWorkingDirectory(dir) {
    let $resultPromise = /** @type {any} */($Call.ByID(2466292864, dir));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ToggleProjectGridView() {
    let $resultPromise = /** @type {any} */($Call.ByID(1335955422));
    return $resultPromise;
}

/**
 * @param {string} studioName
 * @param {string} projectId
 * @returns {Promise<string[]> & { cancel(): void }}
 */
export function UnpinProject(studioName, projectId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3096272593, studioName, projectId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = $Create.Array($Create.Any);
const $$createType2 = settings$0.Studio.createFrom;
const $$createType3 = $Create.Array($$createType2);
