// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @param {string} dir
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddWatcherFolder(dir) {
    let $resultPromise = /** @type {any} */($Call.ByID(3354857277, dir));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<string> & { cancel(): void }}
 */
export function BaseName(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(1325337206, path));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteFile(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(3584094917, path));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteFolder(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(856116975, path));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function DirExists(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(3936509319, path));
    return $resultPromise;
}

/**
 * @param {string} sourcePath
 * @param {string} destinationPath
 * @returns {Promise<string> & { cancel(): void }}
 */
export function DuplicateFile(sourcePath, destinationPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(361196823, sourcePath, destinationPath));
    return $resultPromise;
}

/**
 * @param {string} sourcePath
 * @param {string} destinationPath
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DuplicateFolder(sourcePath, destinationPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(354694321, sourcePath, destinationPath));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function Exists(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(1669188816, path));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<string> & { cancel(): void }}
 */
export function ExtName(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(3723090168, path));
    return $resultPromise;
}

/**
 * @param {string} folderPath
 * @returns {Promise<number> & { cancel(): void }}
 */
export function FileCount(folderPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(3656216629, folderPath));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<string> & { cancel(): void }}
 */
export function FileHash(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(264511466, path));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<$models.FileInfo> & { cancel(): void }}
 */
export function FileStat(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(3553147132, path));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} folderPath
 * @returns {Promise<number> & { cancel(): void }}
 */
export function FolderCount(folderPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(2248903691, folderPath));
    return $resultPromise;
}

/**
 * @param {string} folderPath
 * @returns {Promise<string> & { cancel(): void }}
 */
export function FolderSize(folderPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(2301365901, folderPath));
    return $resultPromise;
}

/**
 * @param {string} ext
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetFileIcon(ext) {
    let $resultPromise = /** @type {any} */($Call.ByID(1842525431, ext));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function IsFile(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(2986631118, path));
    return $resultPromise;
}

/**
 * @param {string[]} elem
 * @returns {Promise<string> & { cancel(): void }}
 */
export function JoinPath(...elem) {
    let $resultPromise = /** @type {any} */($Call.ByID(3092237447, elem));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<void> & { cancel(): void }}
 */
export function LaunchFile(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(4012158109, path));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<void> & { cancel(): void }}
 */
export function LaunchFileWith(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(469279585, path));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<void> & { cancel(): void }}
 */
export function MakeDirs(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(2999144342, path));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<string> & { cancel(): void }}
 */
export function ReadFile(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(4137436818, path));
    return $resultPromise;
}

/**
 * @param {string} dir
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveWatcherFolder(dir) {
    let $resultPromise = /** @type {any} */($Call.ByID(3791295844, dir));
    return $resultPromise;
}

/**
 * @param {string} oldPath
 * @param {string} newPath
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Rename(oldPath, newPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(2421827634, oldPath, newPath));
    return $resultPromise;
}

/**
 * @param {string} path
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RevealInExplorer(path) {
    let $resultPromise = /** @type {any} */($Call.ByID(84899017, path));
    return $resultPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function TempDir() {
    let $resultPromise = /** @type {any} */($Call.ByID(4025507677));
    return $resultPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function UserProjectTemplatesPath() {
    let $resultPromise = /** @type {any} */($Call.ByID(2970095484));
    return $resultPromise;
}

/**
 * @param {string} path
 * @param {string} data
 * @returns {Promise<void> & { cancel(): void }}
 */
export function WriteFile(path, data) {
    let $resultPromise = /** @type {any} */($Call.ByID(3649610065, path, data));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $models.FileInfo.createFrom;
