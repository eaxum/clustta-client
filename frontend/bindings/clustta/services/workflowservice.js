// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/repository/models/models.js";

/**
 * @param {string} projectPath
 * @param {string} workflow_id
 * @param {string} name
 * @param {string} entityTypeId
 * @param {string} parentId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddWorkflow(projectPath, workflow_id, name, entityTypeId, parentId) {
    let $resultPromise = /** @type {any} */($Call.ByID(4015215456, projectPath, workflow_id, name, entityTypeId, parentId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} name
 * @param {models$0.WorkflowTask[]} workflowTasks
 * @param {models$0.WorkflowEntity[]} workflowEntities
 * @param {models$0.WorkflowLink[]} workflowLinks
 * @returns {Promise<models$0.Workflow> & { cancel(): void }}
 */
export function CreateWorkflow(projectPath, name, workflowTasks, workflowEntities, workflowLinks) {
    let $resultPromise = /** @type {any} */($Call.ByID(4183453851, projectPath, name, workflowTasks, workflowEntities, workflowLinks));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<models$0.Workflow[]> & { cancel(): void }}
 */
export function GetWorkflows(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(1218687912, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} workflowId
 * @param {string} name
 * @param {models$0.WorkflowTask[]} workflowTasks
 * @param {models$0.WorkflowEntity[]} workflowEntities
 * @param {models$0.WorkflowLink[]} workflowLinks
 * @returns {Promise<models$0.Workflow> & { cancel(): void }}
 */
export function UpdateWorkflow(projectPath, workflowId, name, workflowTasks, workflowEntities, workflowLinks) {
    let $resultPromise = /** @type {any} */($Call.ByID(871693934, projectPath, workflowId, name, workflowTasks, workflowEntities, workflowLinks));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = models$0.Workflow.createFrom;
const $$createType1 = $Create.Array($$createType0);
