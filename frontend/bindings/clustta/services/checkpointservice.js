// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as repository$0 from "../internal/repository/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/repository/models/models.js";

/**
 * @param {string} projectPath
 * @param {string[]} taskPaths
 * @param {string} message
 * @param {string} previewPath
 * @param {string} groupId
 * @param {boolean} useAsThumbnail
 * @returns {Promise<models$0.Checkpoint[]> & { cancel(): void }}
 */
export function AddCheckpoint(projectPath, taskPaths, message, previewPath, groupId, useAsThumbnail) {
    let $resultPromise = /** @type {any} */($Call.ByID(3142003966, projectPath, taskPaths, message, previewPath, groupId, useAsThumbnail));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddMissingGroupIds(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(2914642103, projectPath));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} projectWorkingDir
 * @param {string[]} taskPaths
 * @param {number} completed
 * @param {number} totalTasks
 * @param {string} message
 * @param {string} previewPath
 * @param {string} groupId
 * @returns {Promise<models$0.Task[]> & { cancel(): void }}
 */
export function AddUntrackedTask(projectPath, projectWorkingDir, taskPaths, completed, totalTasks, message, previewPath, groupId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2633046258, projectPath, projectWorkingDir, taskPaths, completed, totalTasks, message, previewPath, groupId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} checkpointId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteCheckpoint(projectPath, checkpointId) {
    let $resultPromise = /** @type {any} */($Call.ByID(4189987792, projectPath, checkpointId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} taskId
 * @returns {Promise<models$0.Checkpoint[]> & { cancel(): void }}
 */
export function GetCheckpoints(projectPath, taskId) {
    let $resultPromise = /** @type {any} */($Call.ByID(4053110126, projectPath, taskId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<repository$0.CompatTimeline[]> & { cancel(): void }}
 */
export function GetTimeline(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(3258604816, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} remoteUrl
 * @param {string[]} taskIds
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Revert(projectPath, remoteUrl, taskIds) {
    let $resultPromise = /** @type {any} */($Call.ByID(3999685591, projectPath, remoteUrl, taskIds));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} remoteUrl
 * @param {string} checkpointTime
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RevertProject(projectPath, remoteUrl, checkpointTime) {
    let $resultPromise = /** @type {any} */($Call.ByID(3684843780, projectPath, remoteUrl, checkpointTime));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} remoteUrl
 * @param {string[]} taskPaths
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RevertTaskPaths(projectPath, remoteUrl, taskPaths) {
    let $resultPromise = /** @type {any} */($Call.ByID(1735214066, projectPath, remoteUrl, taskPaths));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} remoteUrl
 * @param {string} taskId
 * @param {string} checkpointId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RevertToCheckpoint(projectPath, remoteUrl, taskId, checkpointId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1668596852, projectPath, remoteUrl, taskId, checkpointId));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} checkpointId
 * @param {string} entityName
 * @param {string} extension
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ViewCheckpoint(projectPath, checkpointId, entityName, extension) {
    let $resultPromise = /** @type {any} */($Call.ByID(674726738, projectPath, checkpointId, entityName, extension));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = models$0.Checkpoint.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $Create.Array($Create.Any);
const $$createType3 = repository$0.CompatTimeline.createFrom;
const $$createType4 = $Create.Array($$createType3);
