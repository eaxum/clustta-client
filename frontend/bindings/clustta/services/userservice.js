// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/repository/models/models.js";

/**
 * @param {string} projectPath
 * @param {string} name
 * @param {models$0.RoleAttributes} attributes
 * @returns {Promise<models$0.Role> & { cancel(): void }}
 */
export function AddRole(projectPath, name, attributes) {
    let $resultPromise = /** @type {any} */($Call.ByID(1510146311, projectPath, name, attributes));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} id
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteRole(projectPath, id) {
    let $resultPromise = /** @type {any} */($Call.ByID(1732439423, projectPath, id));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<models$0.Role[]> & { cancel(): void }}
 */
export function GetRoles(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(1185149717, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} userId
 * @returns {Promise<models$0.User> & { cancel(): void }}
 */
export function GetUser(projectPath, userId) {
    let $resultPromise = /** @type {any} */($Call.ByID(2223938271, projectPath, userId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<models$0.User[]> & { cancel(): void }}
 */
export function GetUsers(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(1484618948, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} id
 * @param {string} name
 * @param {models$0.RoleAttributes} attributes
 * @returns {Promise<models$0.Role> & { cancel(): void }}
 */
export function UpdateRole(projectPath, id, name, attributes) {
    let $resultPromise = /** @type {any} */($Call.ByID(894761805, projectPath, id, name, attributes));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = models$0.Role.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = models$0.User.createFrom;
const $$createType3 = $Create.Array($$createType2);
