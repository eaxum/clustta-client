// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../internal/repository/models/models.js";

/**
 * @param {string} projectPath
 * @param {string} templateName
 * @param {string} filePath
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeTemplateFile(projectPath, templateName, filePath) {
    let $resultPromise = /** @type {any} */($Call.ByID(391432429, projectPath, templateName, filePath));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} templateName
 * @param {string} filePath
 * @returns {Promise<models$0.Template> & { cancel(): void }}
 */
export function CreateTemplate(projectPath, templateName, filePath) {
    let $resultPromise = /** @type {any} */($Call.ByID(3156130547, projectPath, templateName, filePath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} templateName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteTemplate(projectPath, templateName) {
    let $resultPromise = /** @type {any} */($Call.ByID(1952849308, projectPath, templateName));
    return $resultPromise;
}

/**
 * @param {string} projectPath
 * @param {string} templateId
 * @returns {Promise<models$0.Template> & { cancel(): void }}
 */
export function GetTemplate(projectPath, templateId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1175489573, projectPath, templateId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @returns {Promise<models$0.Template[]> & { cancel(): void }}
 */
export function GetTemplates(projectPath) {
    let $resultPromise = /** @type {any} */($Call.ByID(2718755682, projectPath));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} projectPath
 * @param {string} templateName
 * @param {string} newName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RenameTemplate(projectPath, templateName, newName) {
    let $resultPromise = /** @type {any} */($Call.ByID(2409633105, projectPath, templateName, newName));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = models$0.Template.createFrom;
const $$createType1 = $Create.Array($$createType0);
