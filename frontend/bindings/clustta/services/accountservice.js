// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as auth_service$0 from "../internal/auth_service/models.js";

/**
 * AddAccount adds a new account (used after login)
 * @param {auth_service$0.Token} token
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddAccount(token) {
    let $resultPromise = /** @type {any} */($Call.ByID(2147627074, token));
    return $resultPromise;
}

/**
 * GetAccountCount returns the number of stored accounts
 * @returns {Promise<number> & { cancel(): void }}
 */
export function GetAccountCount() {
    let $resultPromise = /** @type {any} */($Call.ByID(2478566958));
    return $resultPromise;
}

/**
 * GetActiveAccount returns the currently active account
 * @returns {Promise<auth_service$0.Token> & { cancel(): void }}
 */
export function GetActiveAccount() {
    let $resultPromise = /** @type {any} */($Call.ByID(2403916301));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetAllAccounts returns all stored user accounts
 * @returns {Promise<{ [_: string]: auth_service$0.Token }> & { cancel(): void }}
 */
export function GetAllAccounts() {
    let $resultPromise = /** @type {any} */($Call.ByID(3398964055));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * RemoveAccount removes an account from storage
 * @param {string} userId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveAccount(userId) {
    let $resultPromise = /** @type {any} */($Call.ByID(137549699, userId));
    return $resultPromise;
}

/**
 * SwitchAccount changes the active account
 * @param {string} userId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SwitchAccount(userId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3685889719, userId));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = auth_service$0.Token.createFrom;
const $$createType1 = $Create.Map($Create.Any, $$createType0);
